#include "vector"
#include "queue"
#include "algorithm"
#include "unordered_map"

using namespace std;

class Solution
{
public:
    vector<int> topKFrequent(vector<int> &nums, int k)
    {
        unordered_map<int, int> map;
        //  统计频率
        for (int num : nums)
        {
            map[num]++;
        }

        // 定义最小堆（按频率排序）
        auto cmp = [](const pair<int, int> &a, const pair<int, int> &b)
        {
            return a.second > b.second; // 小顶堆
        };
        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> minHeap(cmp);

        // 维护大小为k的堆
        for (const auto &[num, count] : map)
        {
            if (minHeap.size() < k)
            {
                minHeap.push({num, count});
            }
            else if (count > minHeap.top().second)
            {
                minHeap.pop();
                minHeap.push({num, count});
            }
        }

        vector<int> res;
        while (!minHeap.empty())
        {
            res.push_back(minHeap.top().first);
            minHeap.pop();
        }
        return res;
    }
};